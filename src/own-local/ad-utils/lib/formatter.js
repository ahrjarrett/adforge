"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.formatAddress = exports.findSubdivision = exports.formatPhoneNumber = exports.hiddenPlaceFields = exports.renamedLabels = void 0;

var _phoneFormat = _interopRequireDefault(require("./phoneFormat"));

var _iso = require("./iso3166");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var compact = function compact(arr) {
  return arr.filter(function (val) {
    return val;
  });
};

var getSubdivision = function getSubdivision(country, subdivision, kind) {
  if (!subdivision || !kind) {
    return '';
  }

  var possibleSub = (0, _iso.getSubdivisionFromCode)(subdivision);

  if (possibleSub && possibleSub.countryCode === country) {
    return possibleSub[kind] || '';
  }

  return subdivision || '';
};

var configs = {
  US: {
    address: function address(_ref, renderCompact) {
      var address1 = _ref.address1,
          address2 = _ref.address2,
          city = _ref.city,
          subdivision = _ref.subdivision,
          postalCode = _ref.postalCode,
          country = _ref.country;
      var state = configs.US.findSubdivision(subdivision);
      var formattedAddress = compact([compact([address1, address2]).join(', '), compact([city ? "".concat(city, ", ").concat(state) : state, postalCode]).join(' ')]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: [],
    renamedLabels: {
      subdivision: 'state',
      postal_code: 'zip_code'
    },
    findSubdivision: function findSubdivision(subdivisionCode) {
      return getSubdivision('US', subdivisionCode, 'regionCode');
    }
  },
  GB: {
    address: function address(_ref2, renderCompact) {
      var address1 = _ref2.address1,
          address2 = _ref2.address2,
          postalCode = _ref2.postalCode,
          city = _ref2.city,
          country = _ref2.country,
          subdivision = _ref2.subdivision;
      var county = configs.GB.findSubdivision(subdivision);
      var formattedAddress = compact([address1, address2, city, county, postalCode]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: [],
    renamedLabels: {
      subdivision: 'county',
      postal_code: 'post_code',
      address2: 'locality',
      city: 'post_town'
    },
    findSubdivision: function findSubdivision(subdivisionCode) {
      return getSubdivision('GB', subdivisionCode, 'name');
    }
  },
  CA: {
    address: function address(_ref3, renderCompact) {
      var address1 = _ref3.address1,
          address2 = _ref3.address2,
          city = _ref3.city,
          subdivision = _ref3.subdivision,
          postalCode = _ref3.postalCode,
          country = _ref3.country;
      var province = configs.CA.findSubdivision(subdivision);
      var formattedAddress = compact([compact([address1, address2]).join(', '), compact([city ? "".concat(city, ", ").concat(province) : province, postalCode]).join(' ')]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: [],
    renamedLabels: {
      subdivision: 'province'
    },
    findSubdivision: function findSubdivision(subdivisionCode) {
      return getSubdivision('CA', subdivisionCode, 'regionCode');
    }
  },
  AU: {
    address: function address(_ref4, renderCompact) {
      var address1 = _ref4.address1,
          address2 = _ref4.address2,
          city = _ref4.city,
          subdivision = _ref4.subdivision,
          postalCode = _ref4.postalCode,
          country = _ref4.country;
      var state = configs.AU.findSubdivision(subdivision);
      var formattedAddress = compact([address1 || '', address2 || '', compact([city ? "".concat(city, ", ").concat(state) : state, postalCode]).join(' ')]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: [],
    renamedLabels: {
      subdivision: 'state'
    },
    findSubdivision: function findSubdivision(subdivisionCode) {
      return getSubdivision('AU', subdivisionCode, 'regionCode');
    }
  },

  /* Sample German Address:
    Herrn                         ["to Mr." (form of address)]
    Eberhard Wellhausen           [name]
    Wittekindshof                 [institution / company name]
    Schulstrasse 4                [street address]
    32547 Bad Oyenhausen          [postal code + city/town]
  */
  DE: {
    address: function address(_ref5, renderCompact) {
      var address1 = _ref5.address1,
          address2 = _ref5.address2,
          city = _ref5.city,
          postalCode = _ref5.postalCode;
      var formattedAddress = compact([compact([address1, address2]).join(', ')].concat(_toConsumableArray(compact([city ? "".concat(postalCode, " ").concat(city) : postalCode]))));

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: [],
    renamedLabels: {
      subdivision: 'state'
    }
  },
  NL: {
    address: function address(_ref6, renderCompact) {
      var address1 = _ref6.address1,
          address2 = _ref6.address2,
          city = _ref6.city,
          postalCode = _ref6.postalCode;
      var formattedAddress = compact([address2, address1, compact([postalCode, city]).join(' ')]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: ['subdivision'],
    renamedLabels: {
      address1: 'address',
      address2: 'building_name',
      city: 'locality',
      postal_code: 'post_code'
    }
  },
  // Based on this: https://primacomputing.co.nz/PRIMAMetro/images/AVSSample.jpg
  NZ: {
    address: function address(_ref7, renderCompact) {
      var address1 = _ref7.address1,
          address2 = _ref7.address2,
          city = _ref7.city,
          subdivision = _ref7.subdivision,
          postalCode = _ref7.postalCode,
          country = _ref7.country;
      var subdivisionValue = configs.NZ.findSubdivision(subdivision);
      var formattedAddress = compact([address1, address2, city, compact([subdivisionValue, postalCode]).join(' ')]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: [],
    renamedLabels: {
      city: 'Locality',
      subdivision: 'City'
    },
    findSubdivision: function findSubdivision(subdivisionCode) {
      return getSubdivision('NZ', subdivisionCode, 'name');
    }
  },
  PA: {
    address: function address(_ref8, renderCompact) {
      var address1 = _ref8.address1,
          address2 = _ref8.address2,
          city = _ref8.city,
          subdivision = _ref8.subdivision;
      var state = configs.PA.findSubdivision(subdivision);
      var formattedAddress = compact([address1, address2, city, state]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    customSubdivisions: {
      BC: 'Bocas del Toro',
      PA: 'Panamá Oeste',
      CC: 'Coclé',
      CL: 'Colón',
      CH: 'Chiriquí',
      DA: 'Darién',
      HE: 'Herrera',
      LS: 'Los Santos',
      PM: 'Panamá',
      VR: 'Veraguas',
      EM: 'Emberá',
      SB: 'Kuna Yala',
      NB: 'Ngöbe-Buglé'
    },
    hiddenPlaceFields: ['postal_code'],
    renamedLabels: {},
    findSubdivision: function findSubdivision(subdivisionCode) {
      var customState = configs.PA.customSubdivisions[subdivisionCode.split('-')[1]];

      if (customState) {
        return customState;
      }
    }
  },
  BE: {
    address: function address(_ref9, renderCompact) {
      var address1 = _ref9.address1,
          address2 = _ref9.address2,
          city = _ref9.city,
          postalCode = _ref9.postalCode;
      var formattedAddress = compact([address1, address2, compact([city, postalCode]).join(' ')]);

      if (renderCompact) {
        return [formattedAddress.join(', ')];
      }

      return formattedAddress;
    },
    hiddenPlaceFields: ['subdivision'],
    renamedLabels: {}
  }
};

var renamedLabels = function renamedLabels(country) {
  if (!country) {
    return {};
  }

  if (configs[country]) {
    return configs[country].renamedLabels;
  }

  return {};
};

exports.renamedLabels = renamedLabels;

var hiddenPlaceFields = function hiddenPlaceFields(country) {
  if (!country) {
    return [];
  }

  var labels = configs[country];

  if (!labels) {
    return [];
  }

  return labels.hiddenPlaceFields;
};

exports.hiddenPlaceFields = hiddenPlaceFields;

var formatPhoneNumber = function formatPhoneNumber(phone, country) {
  return (0, _phoneFormat.default)(phone, country, 'National');
};

exports.formatPhoneNumber = formatPhoneNumber;

var findSubdivision = function findSubdivision(subdivisionCode, country) {
  if (!configs[country]) {
    return "No formatter for ".concat(country);
  }

  if (!configs[country].findSubdivision) {
    return subdivisionCode;
  }

  return configs[country].findSubdivision(subdivisionCode);
};

exports.findSubdivision = findSubdivision;

var formatAddress = function formatAddress(address, country) {
  var renderCompact = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return configs[country] ? configs[country].address(address, renderCompact) : ["No formatter for ".concat(country)];
};

exports.formatAddress = formatAddress;
var _default = configs;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,