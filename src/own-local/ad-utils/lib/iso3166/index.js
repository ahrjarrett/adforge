"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSubdivisionFromCode = void 0;

var _countries = _interopRequireDefault(require("./countries"));

var _subdivisions = _interopRequireDefault(require("./subdivisions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getSubdivisionFromCode = function getSubdivisionFromCode(country, code) {
  var countryCode = country;
  var subdivisionCode = code; // If `code` is undefined assume that the full code is in `country`

  if (code === undefined) {
    code = country.trim().toUpperCase();
    var parts = code.split('-'); // A full subdivision code must have exactly two parts.

    if (parts.length !== 2) {
      return null;
    }

    countryCode = parts[0];
    subdivisionCode = parts[1];
  } // ISO-3166-1 alpha 3 code?


  if (countryCode.length === 3) {
    countryCode = _countries.default[countryCode];
  }

  var fullSubCode = "".concat(countryCode, "-").concat(subdivisionCode); // This country code does not exist in our data set.

  if (!_subdivisions.default.hasOwnProperty(countryCode)) {
    return null;
  } // All of a country's subdivisions.


  var subdivisions = _subdivisions.default[countryCode].sub;
  var record = subdivisions[fullSubCode]; // If we could not find the subdivision by its code try testing
  // subdivision names.

  if (record === undefined) {
    for (var key in subdivisions) {
      if (subdivisions.hasOwnProperty(key) && subdivisions[key].name.toUpperCase() === subdivisionCode.toUpperCase()) {
        record = subdivisions[key];
        fullSubCode = key;
        break;
      }
    } // If we still couldn't find it return empty record.


    if (record === undefined) {
      return null;
    }
  } // Add some useful data.


  record.countryName = _subdivisions.default[countryCode].name;
  record.countryCode = countryCode;
  record.code = fullSubCode;
  record.regionCode = fullSubCode.split('-').length === 2 ? fullSubCode.split('-')[1] : '';
  return record;
};

exports.getSubdivisionFromCode = getSubdivisionFromCode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pc28zMTY2L2luZGV4LnRzIl0sIm5hbWVzIjpbImdldFN1YmRpdmlzaW9uRnJvbUNvZGUiLCJjb3VudHJ5IiwiY29kZSIsImNvdW50cnlDb2RlIiwic3ViZGl2aXNpb25Db2RlIiwidW5kZWZpbmVkIiwidHJpbSIsInRvVXBwZXJDYXNlIiwicGFydHMiLCJzcGxpdCIsImxlbmd0aCIsImNvdW50cnlDb2RlcyIsImZ1bGxTdWJDb2RlIiwiZGF0YSIsImhhc093blByb3BlcnR5Iiwic3ViZGl2aXNpb25zIiwic3ViIiwicmVjb3JkIiwia2V5IiwibmFtZSIsImNvdW50cnlOYW1lIiwicmVnaW9uQ29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBSU8sSUFBTUEsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixDQUFDQyxPQUFELEVBQWtCQyxJQUFsQixFQUE0RDtBQUNoRyxNQUFJQyxXQUFXLEdBQUdGLE9BQWxCO0FBQ0EsTUFBSUcsZUFBZSxHQUFHRixJQUF0QixDQUZnRyxDQUloRzs7QUFDQSxNQUFJQSxJQUFJLEtBQUtHLFNBQWIsRUFBd0I7QUFDdEJILElBQUFBLElBQUksR0FBR0QsT0FBTyxDQUFDSyxJQUFSLEdBQWVDLFdBQWYsRUFBUDtBQUVBLFFBQU1DLEtBQUssR0FBR04sSUFBSSxDQUFDTyxLQUFMLENBQVcsR0FBWCxDQUFkLENBSHNCLENBS3RCOztBQUNBLFFBQUlELEtBQUssQ0FBQ0UsTUFBTixLQUFpQixDQUFyQixFQUF3QjtBQUN0QixhQUFPLElBQVA7QUFDRDs7QUFFRFAsSUFBQUEsV0FBVyxHQUFHSyxLQUFLLENBQUMsQ0FBRCxDQUFuQjtBQUNBSixJQUFBQSxlQUFlLEdBQUdJLEtBQUssQ0FBQyxDQUFELENBQXZCO0FBQ0QsR0FqQitGLENBbUJoRzs7O0FBQ0EsTUFBSUwsV0FBVyxDQUFDTyxNQUFaLEtBQXVCLENBQTNCLEVBQThCO0FBQzVCUCxJQUFBQSxXQUFXLEdBQUdRLG1CQUFhUixXQUFiLENBQWQ7QUFDRDs7QUFFRCxNQUFJUyxXQUFXLGFBQU1ULFdBQU4sY0FBcUJDLGVBQXJCLENBQWYsQ0F4QmdHLENBMEJoRzs7QUFDQSxNQUFJLENBQUNTLHNCQUFLQyxjQUFMLENBQW9CWCxXQUFwQixDQUFMLEVBQXVDO0FBQ3JDLFdBQU8sSUFBUDtBQUNELEdBN0IrRixDQStCaEc7OztBQUNBLE1BQU1ZLFlBQVksR0FBR0Ysc0JBQUtWLFdBQUwsRUFBa0JhLEdBQXZDO0FBQ0EsTUFBSUMsTUFBTSxHQUFHRixZQUFZLENBQUNILFdBQUQsQ0FBekIsQ0FqQ2dHLENBbUNoRztBQUNBOztBQUNBLE1BQUlLLE1BQU0sS0FBS1osU0FBZixFQUEwQjtBQUN4QixTQUFLLElBQU1hLEdBQVgsSUFBa0JILFlBQWxCLEVBQWdDO0FBQzlCLFVBQ0VBLFlBQVksQ0FBQ0QsY0FBYixDQUE0QkksR0FBNUIsS0FDQUgsWUFBWSxDQUFDRyxHQUFELENBQVosQ0FBa0JDLElBQWxCLENBQXVCWixXQUF2QixPQUF5Q0gsZUFBZSxDQUFDRyxXQUFoQixFQUYzQyxFQUdFO0FBQ0FVLFFBQUFBLE1BQU0sR0FBR0YsWUFBWSxDQUFDRyxHQUFELENBQXJCO0FBQ0FOLFFBQUFBLFdBQVcsR0FBR00sR0FBZDtBQUNBO0FBQ0Q7QUFDRixLQVZ1QixDQVl4Qjs7O0FBQ0EsUUFBSUQsTUFBTSxLQUFLWixTQUFmLEVBQTBCO0FBQ3hCLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FyRCtGLENBdURoRzs7O0FBQ0FZLEVBQUFBLE1BQU0sQ0FBQ0csV0FBUCxHQUFxQlAsc0JBQUtWLFdBQUwsRUFBa0JnQixJQUF2QztBQUNBRixFQUFBQSxNQUFNLENBQUNkLFdBQVAsR0FBcUJBLFdBQXJCO0FBQ0FjLEVBQUFBLE1BQU0sQ0FBQ2YsSUFBUCxHQUFjVSxXQUFkO0FBQ0FLLEVBQUFBLE1BQU0sQ0FBQ0ksVUFBUCxHQUFvQlQsV0FBVyxDQUFDSCxLQUFaLENBQWtCLEdBQWxCLEVBQXVCQyxNQUF2QixLQUFrQyxDQUFsQyxHQUFzQ0UsV0FBVyxDQUFDSCxLQUFaLENBQWtCLEdBQWxCLEVBQXVCLENBQXZCLENBQXRDLEdBQWtFLEVBQXRGO0FBRUEsU0FBT1EsTUFBUDtBQUNELENBOURNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvdW50cnlDb2RlcyBmcm9tICcuL2NvdW50cmllcyc7XG5pbXBvcnQgZGF0YSBmcm9tICcuL3N1YmRpdmlzaW9ucyc7XG5cbmltcG9ydCB7IFN1YmRpdmlzaW9uSW5mbyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZ2V0U3ViZGl2aXNpb25Gcm9tQ29kZSA9IChjb3VudHJ5OiBzdHJpbmcsIGNvZGU/OiBzdHJpbmcpOiBTdWJkaXZpc2lvbkluZm8gfCBudWxsID0+IHtcbiAgbGV0IGNvdW50cnlDb2RlID0gY291bnRyeTtcbiAgbGV0IHN1YmRpdmlzaW9uQ29kZSA9IGNvZGU7XG5cbiAgLy8gSWYgYGNvZGVgIGlzIHVuZGVmaW5lZCBhc3N1bWUgdGhhdCB0aGUgZnVsbCBjb2RlIGlzIGluIGBjb3VudHJ5YFxuICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29kZSA9IGNvdW50cnkudHJpbSgpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBjb25zdCBwYXJ0cyA9IGNvZGUuc3BsaXQoJy0nKTtcblxuICAgIC8vIEEgZnVsbCBzdWJkaXZpc2lvbiBjb2RlIG11c3QgaGF2ZSBleGFjdGx5IHR3byBwYXJ0cy5cbiAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb3VudHJ5Q29kZSA9IHBhcnRzWzBdO1xuICAgIHN1YmRpdmlzaW9uQ29kZSA9IHBhcnRzWzFdO1xuICB9XG5cbiAgLy8gSVNPLTMxNjYtMSBhbHBoYSAzIGNvZGU/XG4gIGlmIChjb3VudHJ5Q29kZS5sZW5ndGggPT09IDMpIHtcbiAgICBjb3VudHJ5Q29kZSA9IGNvdW50cnlDb2Rlc1tjb3VudHJ5Q29kZV07XG4gIH1cblxuICBsZXQgZnVsbFN1YkNvZGUgPSBgJHtjb3VudHJ5Q29kZX0tJHtzdWJkaXZpc2lvbkNvZGV9YDtcblxuICAvLyBUaGlzIGNvdW50cnkgY29kZSBkb2VzIG5vdCBleGlzdCBpbiBvdXIgZGF0YSBzZXQuXG4gIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShjb3VudHJ5Q29kZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCBvZiBhIGNvdW50cnkncyBzdWJkaXZpc2lvbnMuXG4gIGNvbnN0IHN1YmRpdmlzaW9ucyA9IGRhdGFbY291bnRyeUNvZGVdLnN1YjtcbiAgbGV0IHJlY29yZCA9IHN1YmRpdmlzaW9uc1tmdWxsU3ViQ29kZV07XG5cbiAgLy8gSWYgd2UgY291bGQgbm90IGZpbmQgdGhlIHN1YmRpdmlzaW9uIGJ5IGl0cyBjb2RlIHRyeSB0ZXN0aW5nXG4gIC8vIHN1YmRpdmlzaW9uIG5hbWVzLlxuICBpZiAocmVjb3JkID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdWJkaXZpc2lvbnMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgc3ViZGl2aXNpb25zLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgc3ViZGl2aXNpb25zW2tleV0ubmFtZS50b1VwcGVyQ2FzZSgpID09PSBzdWJkaXZpc2lvbkNvZGUudG9VcHBlckNhc2UoKVxuICAgICAgKSB7XG4gICAgICAgIHJlY29yZCA9IHN1YmRpdmlzaW9uc1trZXldO1xuICAgICAgICBmdWxsU3ViQ29kZSA9IGtleTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2Ugc3RpbGwgY291bGRuJ3QgZmluZCBpdCByZXR1cm4gZW1wdHkgcmVjb3JkLlxuICAgIGlmIChyZWNvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHNvbWUgdXNlZnVsIGRhdGEuXG4gIHJlY29yZC5jb3VudHJ5TmFtZSA9IGRhdGFbY291bnRyeUNvZGVdLm5hbWU7XG4gIHJlY29yZC5jb3VudHJ5Q29kZSA9IGNvdW50cnlDb2RlO1xuICByZWNvcmQuY29kZSA9IGZ1bGxTdWJDb2RlO1xuICByZWNvcmQucmVnaW9uQ29kZSA9IGZ1bGxTdWJDb2RlLnNwbGl0KCctJykubGVuZ3RoID09PSAyID8gZnVsbFN1YkNvZGUuc3BsaXQoJy0nKVsxXSA6ICcnO1xuXG4gIHJldHVybiByZWNvcmQ7XG59O1xuIl19